menu "I2C Configuration"
    depends on ROBUSTO_SUPPORTS_I2C
       
    
    config I2C_SDA_IO
        int "SDA GPIO Pin"
        default 4
        range 0 60
        help
            Pin number of the SDA (data) line.
    config I2C_SCL_IO
        int "SCL GPIO Pin"
        default 22
        range 0 60
        help
            Pin number of the SCL (clock) line.
    config I2C_CONTROLLER_NUM
        int "SCL Controller to use"
        default 0
        range 0 1
        help
            The ESP32 have two I2C controllers (sometimes called ports), choose which to use for Robusto.
            Note: You probably want to use one for communication with peripherals (like sensors, screens).
            If you mix them, they will interfere with each others' function. 

    config I2C_MAX_FREQ_HZ
        int "Maximum I2C clock frequency"
        default 400000
        range 0 4000000
        help
            Robusto will always try with the highest frequency, and then taper down until its working. 
            The max frequency is 4 Mhz, however this is likely not going to work.
            1 200 000 Hz seems to be max on 20 cm dupont unshielded with common ground via USB.
            The default, 400 000 Hz, is the higher common frequency. 
            Frequency translates into Kbit/s like this: kbit/s = freq(Hz)/16. 
            

    config I2C_ACKNOWLEGMENT_TIMEOUT_MS
        int "I2C acknowlegement timeout (milliseconds)"
        default 50
        range 0 10000
        help
            The extra time Robusto will wait for a acknowledgement (not to confuse with I2C ack/nack).
            To minimize the time it hogs the line to optimize throughput, Robusto
            predict the time a transmission will take and adjust timeouts to this. 
            However, it has to wait a short while for the slave to respond with the receipt. 
            This it usually a very short time, but if the slave has enabled heavy logging for example, 
            it might take hundreds of milliseconds. Here this can be taken into account.

    config I2C_ADDR
        int "I2C Address"
        default -1
        range -1 256
        help
            When a peer listens, it is put in I2C slave mode by Robusto, and listens for request that matches a given address.
            This is that address. 
            IMPORTANT: This must be actively set to a value between 0 and 256 or the build will fail. 
            Note: It is possible that this address might become dynamically assigned in later versions.
            In that case this setting will force that address to be used, and -1 will no longer stop builds. 
    config I2C_RESEND_COUNT
        int "I2C Resend count"
        default 2
        range 0 256
        help
            Number of times the library tries to re-send through I2C before it considers it a failure.
    config SDP_SIM_I2C_BAD_CRC
        int "| SIM | The number of times I2C will get a bad CRC32 on all requests"
        default 0
        depends on SDP_SIM   
        range 0 256
        help
            When a peer returns with a CRC32 on the message, this will intervene and set the wrong
            value, causing all crc checks to fail SDP_SIM_I2C_BAD_CRC number of times.
    menu "Testing"
        
            config ROB_NETWORK_TEST_I2C_LOOP_INITIATOR
            bool "This device begins and ends a test loop"
            depends on ROBUSTO_NETWORK_INTEGRATION_TESTING            
            help
                When testing the communication of several devices, a test loop is often constructed to test both sending and receiving of the same communication.

                The loop starts with all devices except from the initiator starts listening. 
                The first call is done by the initiator, that sends to the next and then starts listening. 
                The next, in turn sends to the next. 
                The last device have the initiator as the destination, and the loop is closed when the initiator has gotten the message. 

        config ROB_NETWORK_TEST_I2C_CALL_ADDR
            depends on ROBUSTO_NETWORK_INTEGRATION_TESTING || ROBUSTO_NETWORK_QOS_TESTING || ROBUSTO_EXAMPLE_HELLO_CLIENT || ROBUSTO_EXAMPLE_CONDUCTOR_CLIENT
            int "The I2C address to test"
            default -1
            help
                When doing physical testing of I2C networks, this is the address one will call upon when testing


        config ROB_NETWORK_TEST_I2C_KILL_SWITCH
            int "Kill switch GPIO - Makes I2C stop working when low"
            default -1
            help
                Used for testing scoring.
        
    endmenu  

endmenu